{
	"info": {
		"_postman_id": "befb8c7e-56f9-4418-a521-cd1da9052b2b",
		"name": "Loxxess.Lx1.LosConnector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Article",
			"item": [
				{
					"name": "High priority cases",
					"item": [
						{
							"name": "Art_1: Call request to create article with valid request body successful",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Add new Article with random articleID, lentth, width, height, weight,...\")",
											"",
											"pm.environment.set(\"autoArticleID\", \"autoArticleID_\".concat(_.random(20,500)))",
											"",
											"pm.environment.set(\"articleLength\", _.random(20,500));",
											"pm.environment.set(\"articleWidth\", _.random(20,500));",
											"pm.environment.set(\"articleHeight\", _.random(20,500));",
											"pm.environment.set(\"articleWeight\", _.random(100,1000));",
											"",
											"pm.environment.set(\"piecesPerStorageBox\", _.random(1,500));",
											"pm.environment.set(\"plannedSalesPerWeek\", _.random(1,200000));",
											"pm.environment.set(\"minimumIncomingAmount\", _.random(1,1000));",
											"",
											"pm.environment.replaceIn('{{$randomDepartment}}');",
											"",
											"let statusArray = [\"active\", \"inactive\"];",
											"pm.environment.set(\"commonStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);",
											"",
											"let categoryArray = [\"Gefahrstoff\", \"Kitex\", \"Kosmetik\", \"Lebensmittel\", \"Rest\", \"Tiernahrung\"];",
											"pm.environment.set(\"articleCategory\", categoryArray[Math.floor(Math.random() * categoryArray.length)]);",
											"",
											"let temperatureArray = [\"Z0\", \"Z1\", \"Z2\"];",
											"pm.environment.set(\"articleTemp\", temperatureArray[Math.floor(Math.random() * temperatureArray.length)]);",
											"",
											"let dangerousGoodsArray = [\"Flammpunktklasse 1\", \"Flammpunktklasse 2\", \"Flammpunktklasse 3\"];",
											"pm.environment.set(\"dangerousGoods\", dangerousGoodsArray[Math.floor(Math.random() * dangerousGoodsArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create article data was accepted.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"$articleId = pm.environment.get(\"autoArticleID\");",
											"",
											"$expectedLength = pm.environment.get(\"articleLength\");",
											"$expectedHeight = pm.environment.get(\"articleHeight\");",
											"$expectedWidth = pm.environment.get(\"articleWidth\");",
											"$expectedWeight = pm.environment.get(\"articleWeight\");",
											"",
											"$expectedCategory = pm.environment.get(\"articleCategory\");",
											"$expectedRiskClass = pm.environment.get(\"dangerousGoods\");",
											"",
											"$expectedPiecesPerStorageBox = pm.environment.get(\"piecesPerStorageBox\");",
											"$expectedPlannedSalesPerWeek = pm.environment.get(\"plannedSalesPerWeek\");",
											"$expectedMinimumIncomingAmount = pm.environment.get(\"minimumIncomingAmount\");",
											"",
											"$expectedStatus = pm.environment.get(\"commonStatus\");",
											"",
											"$clientId = pm.environment.get(\"clientId\");",
											"",
											"const responsebody = pm.response.json();",
											"",
											"pm.test(\"Article Id is: \" + $articleId, function () {",
											"    pm.expect(responsebody.articleId).to.eql($articleId.toString());",
											"});",
											" ",
											"pm.test(\"clientId is 109\", function () {",
											"    pm.expect(responsebody.clientId).to.eql($clientId.toString());",
											"});",
											"",
											"pm.test(\"Category is: \" + $expectedCategory, function () {",
											"    pm.expect(responsebody.category).to.eql($expectedCategory)",
											"});",
											"",
											"pm.test(\"dangerousGoods is: \" + $expectedRiskClass, function () {",
											"    pm.expect(responsebody.riskClass).to.eql($expectedRiskClass)",
											"});",
											"",
											"pm.test(\"Length is: \" + $expectedLength, function () {",
											"    pm.expect(responsebody.unit.length).to.eql($expectedLength);",
											"});",
											"",
											"pm.test(\"Height is: \" + $expectedHeight, function () {",
											"    pm.expect(responsebody.unit.height).to.eql($expectedHeight);",
											"});",
											"",
											"pm.test(\"Width is: \" + $expectedWidth, function () {",
											"    pm.expect(responsebody.unit.width).to.eql($expectedWidth);",
											"});",
											"",
											"pm.test(\"Weight is: \" + $expectedWeight, function () {",
											"    pm.expect(responsebody.unit.weight).to.eql($expectedWeight);",
											"});",
											"",
											"pm.test(\"Status is: \" + $expectedStatus, function () {",
											"    pm.expect(responsebody.status).to.eql($expectedStatus);",
											"});",
											"",
											"pm.test(\"piecesPerStorageBox is: \" + $expectedPiecesPerStorageBox, function () {",
											"    pm.expect(responsebody.whArticle.piecesPerStorageBox).to.eql($expectedPiecesPerStorageBox);",
											"});",
											"",
											"pm.test(\"PlannedSalesPerWeek is: \" + $expectedPlannedSalesPerWeek, function () {",
											"    pm.expect(responsebody.whArticle.plannedSalesPerWeek).to.eql($expectedPlannedSalesPerWeek);",
											"});",
											"",
											"pm.test(\"MinimumIncomingAmount is: \" + $expectedMinimumIncomingAmount, function () {",
											"    pm.expect(responsebody.whArticle.minimumIncomingAmount).to.eql($expectedMinimumIncomingAmount);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_2:  Call request to update article with valid request body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"console.info(\"Update article information with random lentth, width, height, weight,...\")",
											"",
											"pm.environment.set(\"articleLength\", _.random(20,500));",
											"pm.environment.set(\"articleWidth\", _.random(20,500));",
											"pm.environment.set(\"articleHeight\", _.random(20,500));",
											"pm.environment.set(\"articleWeight\", _.random(100,1000));",
											"",
											"pm.environment.set(\"piecesPerStorageBox\", _.random(1,500));",
											"pm.environment.set(\"plannedSalesPerWeek\", _.random(1,200000));",
											"pm.environment.set(\"minimumIncomingAmount\", _.random(1,1000));",
											"",
											"pm.environment.replaceIn('{{$randomDepartment}}');",
											"",
											"let statusArray = [\"active\", \"inactive\"];",
											"pm.environment.set(\"commonStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);",
											"",
											"let categoryArray = [\"Gefahrstoff\", \"Kitex\", \"Kosmetik\", \"Lebensmittel\", \"Rest\", \"Tiernahrung\"];",
											"pm.environment.set(\"articleCategory\", categoryArray[Math.floor(Math.random() * categoryArray.length)]);",
											"",
											"let temperatureArray = [\"Z0\", \"Z1\", \"Z2\"];",
											"pm.environment.set(\"articleTemp\", temperatureArray[Math.floor(Math.random() * temperatureArray.length)]);",
											"",
											"let dangerousGoodsArray = [\"Flammpunktklasse 1\", \"Flammpunktklasse 2\", \"Flammpunktklasse 3\"];",
											"pm.environment.set(\"dangerousGoods\", dangerousGoodsArray[Math.floor(Math.random() * dangerousGoodsArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update article data was accepted.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"$articleId = pm.environment.get(\"autoArticleID\");",
											"",
											"$expectedLength = pm.environment.get(\"articleLength\");",
											"$expectedHeight = pm.environment.get(\"articleHeight\");",
											"$expectedWidth = pm.environment.get(\"articleWidth\");",
											"$expectedWeight = pm.environment.get(\"articleWeight\");",
											"",
											"$expectedCategory = pm.environment.get(\"articleCategory\");",
											"$expectedRiskClass = pm.environment.get(\"dangerousGoods\");",
											"",
											"$expectedPiecesPerStorageBox = pm.environment.get(\"piecesPerStorageBox\");",
											"$expectedPlannedSalesPerWeek = pm.environment.get(\"plannedSalesPerWeek\");",
											"$expectedMinimumIncomingAmount = pm.environment.get(\"minimumIncomingAmount\");",
											"",
											"$expectedStatus = pm.environment.get(\"commonStatus\");",
											"",
											"$clientId = pm.environment.get(\"clientId\");",
											"",
											"const responsebody = pm.response.json();",
											"",
											"pm.test(\"Article Id is: \" + $articleId, function () {",
											"    pm.expect(responsebody.articleId).to.eql($articleId.toString());",
											"});",
											" ",
											"pm.test(\"clientId is 109\", function () {",
											"    pm.expect(responsebody.clientId).to.eql($clientId.toString());",
											"});",
											"",
											"pm.test(\"Category is: \" + $expectedCategory, function () {",
											"    pm.expect(responsebody.category).to.eql($expectedCategory)",
											"});",
											"",
											"pm.test(\"dangerousGoods is: \" + $expectedRiskClass, function () {",
											"    pm.expect(responsebody.riskClass).to.eql($expectedRiskClass)",
											"});",
											"",
											"pm.test(\"Length is: \" + $expectedLength, function () {",
											"    pm.expect(responsebody.unit.length).to.eql($expectedLength);",
											"});",
											"",
											"pm.test(\"Height is: \" + $expectedHeight, function () {",
											"    pm.expect(responsebody.unit.height).to.eql($expectedHeight);",
											"});",
											"",
											"pm.test(\"Width is: \" + $expectedWidth, function () {",
											"    pm.expect(responsebody.unit.width).to.eql($expectedWidth);",
											"});",
											"",
											"pm.test(\"Weight is: \" + $expectedWeight, function () {",
											"    pm.expect(responsebody.unit.weight).to.eql($expectedWeight);",
											"});",
											"",
											"pm.test(\"Status is: \" + $expectedStatus, function () {",
											"    pm.expect(responsebody.status).to.eql($expectedStatus);",
											"});",
											"",
											"pm.test(\"piecesPerStorageBox is: \" + $expectedPiecesPerStorageBox, function () {",
											"    pm.expect(responsebody.whArticle.piecesPerStorageBox).to.eql($expectedPiecesPerStorageBox);",
											"});",
											"",
											"pm.test(\"PlannedSalesPerWeek is: \" + $expectedPlannedSalesPerWeek, function () {",
											"    pm.expect(responsebody.whArticle.plannedSalesPerWeek).to.eql($expectedPlannedSalesPerWeek);",
											"});",
											"",
											"pm.test(\"MinimumIncomingAmount is: \" + $expectedMinimumIncomingAmount, function () {",
											"    pm.expect(responsebody.whArticle.minimumIncomingAmount).to.eql($expectedMinimumIncomingAmount);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_8: Verify can get the article information with correct articleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"$articleId = pm.environment.get(\"autoArticleID\");",
											"",
											"$expectedLength = pm.environment.get(\"articleLength\");",
											"$expectedHeight = pm.environment.get(\"articleHeight\");",
											"$expectedWidth = pm.environment.get(\"articleWidth\");",
											"$expectedWeight = pm.environment.get(\"articleWeight\");",
											"",
											"$expectedCategory = pm.environment.get(\"articleCategory\");",
											"",
											"$expectedPiecesPerStorageBox = pm.environment.get(\"piecesPerStorageBox\");",
											"$expectedPlannedSalesPerWeek = pm.environment.get(\"plannedSalesPerWeek\");",
											"$expectedMinimumIncomingAmount = pm.environment.get(\"minimumIncomingAmount\");",
											"",
											"$expectedStatus = pm.environment.get(\"commonStatus\");",
											"",
											"$clientId = pm.environment.get(\"clientId\");",
											"",
											"pm.test(\"Get article \" + $articleId + \" information\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"pm.test(\"Category is: \" + $expectedCategory, function () {",
											"    pm.expect(responsebody.category).to.eql($expectedCategory)",
											"});",
											"",
											"pm.test(\"Length is: \" + $expectedLength, function () {",
											"    pm.expect(responsebody.length).to.eql($expectedLength);",
											"});",
											"",
											"pm.test(\"Height is: \" + $expectedHeight, function () {",
											"    pm.expect(responsebody.height).to.eql($expectedHeight);",
											"});",
											"",
											"pm.test(\"Width is: \" + $expectedWidth, function () {",
											"    pm.expect(responsebody.width).to.eql($expectedWidth);",
											"});",
											"",
											"pm.test(\"Weight is: \" + $expectedWeight, function () {",
											"    pm.expect(responsebody.weight).to.eql($expectedWeight);",
											"});",
											"",
											"pm.test(\"Status is: \" + $expectedStatus, function () {",
											"    pm.expect(responsebody.status).to.eql($expectedStatus);",
											"});",
											"",
											"pm.test(\"piecesPerStorageBox is: \" + $expectedPiecesPerStorageBox, function () {",
											"    pm.expect(responsebody.piecesPerStorageBox).to.eql($expectedPiecesPerStorageBox);",
											"});",
											"",
											"pm.test(\"PlannedSalesPerWeek is: \" + $expectedPlannedSalesPerWeek, function () {",
											"    pm.expect(responsebody.plannedSalesPerWeek).to.eql($expectedPlannedSalesPerWeek);",
											"});",
											"",
											"pm.test(\"MinimumIncomingAmount is: \" + $expectedMinimumIncomingAmount, function () {",
											"    pm.expect(responsebody.minimumIncomingAmount).to.eql($expectedMinimumIncomingAmount);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ApiKey",
										"value": "unserGeheimerSchluessel"
									}
								],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify invalid case",
					"item": [
						{
							"name": "Art_3: Call Create article request with missing madatory fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_3: Call request with missing madatory fields\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"weight must not be null\",\"length must not be null\",\"temperatureZone must not be empty\",\"height must not be null\",\"width must not be null\",\"category must not be empty\"];",
											"",
											"pm.test(\"Verify the error message notice that cannot send request with lacking mandatory fields\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_4: Call request with mandatory fields is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_4: Call request with mandatory fields is null\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"weight must not be null\",\"length must not be null\",\"temperatureZone must not be empty\",\"height must not be null\",\"width must not be null\",\"category must not be empty\"];",
											"",
											"pm.test(\"Verify the error message notice that all mandatory fields could not be null or empty\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": null,\n    \"width\": null,\n    \"height\": null,\n    \"weight\": null,\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": null,\n    \"temperatureZone\": null,\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_4: Call request with mandatory fields is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_4: Call request with mandatory fields is empty\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"weight must not be null\",\"length must not be null\",\"temperatureZone must not be empty\",\"height must not be null\",\"width must not be null\",\"category must not be empty\"];",
											"",
											"pm.test(\"Verify the error message notice that all mandatory fields could not be null or empty\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"\",\n    \"width\": \"\",\n    \"height\": \"\",\n    \"weight\": \"\",\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"\",\n    \"temperatureZone\": \"\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_5: Call request with plannedSalesPerWeek has large number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_5: Call request with plannedSalesPerWeek has large number\")",
											"",
											"pm.environment.set(\"largeNumber\", 99999999999);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"plannedSalesPerWeek should be less than or equal 1000000.0\"];",
											"",
											"pm.test(\"Verify the error message to notice that plannedSalesPerWeek should be less than or equal 1000000.0\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": {{largeNumber}},\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_5: Call request with minimumIncomingAmount has large number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_5: Call request with minimumIncomingAmount has large number\")",
											"",
											"pm.environment.set(\"largeNumber\", 99999999999);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"minimumIncomingAmount should be less than or equal 1000000.0\"];",
											"",
											"pm.test(\"Verify the error message\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{largeNumber}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_6: Verify the status only allow for string “active” or “inactive”",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_5: Call request with minimumIncomingAmount has large number\")",
											"",
											"pm.environment.set(\"largeNumber\", 99999999999);",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"",
											"pm.environment.set(\"randomString\", randomString(8));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"status should be active or inactive\"];",
											"",
											"pm.test(\"Verify the error message\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{randomString}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{autoArticleID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{autoArticleID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_7: Verify cannot send request with articleID is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_7: Verify cannot send request with articleID is empty\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code should be 400 Bad Request.\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = \"articleId must not be blank\";",
											"",
											"pm.test(\"Verify the error message\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "apiKey",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": \"{{articleLength}}\",\n    \"width\": \"{{articleWidth}}\",\n    \"height\": {{articleHeight}},\n    \"weight\": {{articleWeight}},\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\n    \"category\": \"{{articleCategory}}\",\n    \"temperatureZone\": \"{{articleTemp}}\",\n    \"dangerousGoods\": \"{{dangerousGoods}}\",\n    \"plannedSalesPerWeek\": \"{{plannedSalesPerWeek}}\",\n    \"minimumIncomingAmount\": \"{{minimumIncomingAmount}}\",\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId=",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Art_9: Verify can NOT get the article information with articleID is NOT exist in DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify the status code shoud be 404.\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Article \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify the error message in response body\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Art_9: Verify can NOT get the article information with articleID is NOT exist in DB\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "ApiKey",
										"value": "unserGeheimerSchluessel"
									}
								],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/articles?articleId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"articles"
									],
									"query": [
										{
											"key": "articleId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "HandlingUnits",
			"item": [
				{
					"name": "High priority test cases",
					"item": [
						{
							"name": "HU_1: Call request to create handlingUnits successfully",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_1: Call request to create handlingUnits successfully\")",
											"",
											"pm.environment.set(\"handlingID\", \"autoHandlingID_\".concat(_.random(20,500)))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify create Handling successfully, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_7: Call request to get the status of HandlingUnit successfully (after creating new handling unit)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_7: Call request to get the status of HandlingUnit successfully (after creating new handling unit)\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get handling unit satus successfully, status code 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"let expectedStatus = pm.environment.get(\"commonStatus\");",
											"",
											"pm.test(\"Verify status code is: \" + expectedStatus, function () {",
											"    pm.expect(responsebody.status).to.eql(expectedStatus)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_4: Call request to change the status of handlingUnits successfully",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_4: Call request to change the status of handlingUnits successfully\")",
											"",
											"if(pm.environment.get(\"commonStatus\") == \"active\") {",
											"    pm.environment.set(\"updatedStatus\", \"inactive\")",
											"} else {",
											"    pm.environment.set(\"updatedStatus\", \"active\")",
											"}",
											"",
											"console.log(\"common status: \" + pm.environment.get(\"commonStatus\"));",
											"console.log(\"updated status: \" + pm.environment.get(\"updatedStatus\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify update Handling status successfully, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{updatedStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_7: Call request to get the status of HandlingUnit successfully (after updating handling's status)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_7: Call request to get the status of HandlingUnit successfully (after updating handling's status)\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get handling unit satus successfully, status code 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"let expectedStatus = pm.environment.get(\"updatedStatus\");",
											"",
											"pm.test(\"Verify status code is: \" + expectedStatus, function () {",
											"    pm.expect(responsebody.status).to.eql(expectedStatus)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_9: Call request to DELETE Handling with ID is NOT exist in DB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_9: Call request to DELETE Handling with ID is NOT exist in DB\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can delete unuse handling, status code 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify invalid cases",
					"item": [
						{
							"name": "HU_2: Call request to create handlingUnits with handlingUnitId is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_2: Call request to create handlingUnits with handlingUnitId is empty\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message to notice that handling must not be blank, status code 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = \"handlingUnit must not be blank\";",
											"",
											"pm.test(\"Verify error message displays to notice that the handlingID must not be blank\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId=",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_3: Call request with status  Is NOT “active” or “inactive”",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_3: Call request with status  Is NOT “active” or “inactive”\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message to notice that status must be active or inactive, status code 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"status should be active or inactive\"];",
											"",
											"pm.test(\"Verify error message displays to notice that the status must be active or inactive\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{randomString}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_5: Call request to create handlingUnits with handlingUnitId is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_5: Call request to create handlingUnits with handlingUnitId is empty\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify update Handling status successfully, status code 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = \"handlingUnit must not be blank\";",
											"",
											"pm.test(\"Verify error message displays to notice that the handlingID must not be blank\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId=",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_5: Call request to create handlingUnits with handlingUnitId is NOT exist in DB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_5: Call request to create handlingUnits with handlingUnitId is NOT exist in DB\");",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"",
											"pm.environment.set(\"randomString\", randomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify update Handling status with handling ID does NOT exist in DB, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = \"Handling unit \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify error message displays to notice that the testing handlingID does not exist\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_6: Call request with status with is NOT “active” or “inactive”",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_6: Call request with status with is NOT “active” or “inactive”\");",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"",
											"pm.environment.set(\"randomString\", randomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify update Handling status is NOT active or inactive, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"var expectedErrorMessage = [\"status should be active or inactive\"];",
											"",
											"pm.test(\"Verify error message displays to notice that the status must be active or inactive\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{randomString}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_8: Call request with HandlingUnit is NOT exist in DB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_8: Call request with HandlingUnit is NOT exist in DB\")",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"",
											"pm.environment.set(\"randomString\", randomString(8));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with HandlingUnit is NOT exist in DB, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"let expectedErrorMessage = \"Handling unit \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify error message when calling request with HandlingUnit is NOT exist in DB: \", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "HU_10: Call request to DELETE Handling with ID is NOT exist in DB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_10: Call request to DELETE Handling with ID is NOT exist in DB\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can NOT delete handling unit that does NOT exist in DB, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"let expectedErrorMessage = \"Handling unit \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify error message when calling request with HandlingUnit is NOT exist in DB: \", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderLinesArray = [];",
									"",
									"for (var _i = 1; _i <= 5; _i++) {",
									"    var orderLine = {",
									"        line: _i.toString(),",
									"        article: pm.environment.get(\"autoArticleID\"),",
									"        quantity: _.random(1,100)",
									"    };",
									"",
									"    orderLinesArray.push(orderLine);",
									"}",
									"pm.environment.set(\"orderLine\", JSON.stringify(orderLinesArray));",
									"",
									"var time = require('moment');",
									"var knownTime = time().subtract(4, 'days');",
									"var futureTime = time().add(4, 'days');",
									"pm.environment.set(\"orderID\", \"autoOrderID_\".concat(_.random(20,500)))",
									"",
									"pm.environment.set(\"knownDate\", knownTime.format());",
									"pm.environment.set(\"shippingDeadlineDate\", futureTime.format());",
									"pm.environment.set(\"loadingDeadlineDate\", futureTime.format());",
									"pm.environment.set(\"orderPriority\", _.random(1,5));",
									"",
									"let packageTypeArray = [\"dm146\",\"dm125\",\"dm104\",\"dm084\",\"dm081\",\"dm069\",\"dm058\",\"dm046\",\"dm42n\",\"dm036\",\"dm30n\",\"dm024\",\"dm015\",\"dm012\",\"dm09n\",\"dm006\",\"dm007\",\"dm001\",\"dmadka\"];",
									"pm.environment.set(\"packageType\", packageTypeArray[Math.floor(Math.random() * packageTypeArray.length)]);",
									"",
									"let orderTypeArray = [\"RBLV\",\"YNOHEXW\",\"YNOHNEXW\",\"YUMX\"];",
									"pm.environment.set(\"orderType\", orderTypeArray[Math.floor(Math.random() * orderTypeArray.length)]);",
									"",
									"let carrierArray = [\"A1\",\"A2\",\"A3\",\"B1\",\"B2\"];",
									"pm.environment.set(\"carrier\", carrierArray[Math.floor(Math.random() * carrierArray.length)]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create/Update order was accepted.\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const responsebody = pm.response.json();",
									"",
									"var clientId = pm.environment.get(\"clientId\");",
									"var orderID = pm.environment.get(\"orderID\");",
									"var knownDate = pm.environment.get(\"knownDate\");",
									"var loadingDeadlineDate = pm.environment.get(\"loadingDeadlineDate\");",
									"var orderPriority = pm.environment.get(\"orderPriority\");",
									"var carrier = pm.environment.get(\"carrier\");",
									"var orderLine = JSON.parse(pm.environment.get(\"orderLine\"));",
									"",
									"pm.test(\"ClientID is correct\", function () {",
									"    pm.expect(responsebody.clientId).to.eql(clientId.toString());",
									"});",
									"",
									"pm.test(\"order Id is correct\", function () {",
									"    pm.expect(responsebody.orderId).to.eql(orderID);",
									"});",
									"",
									"pm.test(\"known Date is correct\", function () {",
									"    let actualKnownDate = new Date(responsebody.knownDate);",
									"    let expectedKnownDate = new Date(knownDate);",
									"",
									"    pm.expect(actualKnownDate.getTime()).to.eql(expectedKnownDate.getTime());",
									"});",
									"",
									"pm.test(\"loading DeadlineDate is correct\", function () {",
									"    let actualLoadingDeadlineDate = new Date(responsebody.loadingDeadlineDate);",
									"    let expectedLoadingDeadlineDate = new Date(loadingDeadlineDate)",
									"",
									"    pm.expect(actualLoadingDeadlineDate.getTime()).to.eql(expectedLoadingDeadlineDate.getTime());",
									"});",
									"",
									"pm.test(\"priority is correct\", function () {",
									"    pm.expect(responsebody.priority).to.eql(orderPriority);",
									"});",
									"",
									"pm.test(\"orderlines is correct\", function () {",
									"    pm.expect(JSON.stringify(responsebody.orderlines)).to.eql(JSON.stringify(orderLine));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ApiKey",
								"value": "ourSecretApiKey"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"knownDate\": \"{{knownDate}}\",\n  \"shippingDeadlineDate\": \"{{shippingDeadlineDate}}\",\n  \"packageType\": \"{{packageType}}\",\n  \"orderType\": \"{{orderType}}\",\n  \"carrier\": \"{{carrier}}\",\n  \"maxPackageWeight\": 1,\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\n  \"priority\": \"{{orderPriority}}\",\n  \"orderlines\": {{orderLine}}\n}"
						},
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/orders?orderId={{orderID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET order Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Order information successfully.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var moment = require('moment');",
									"",
									"var clientId = pm.environment.get(\"clientId\");",
									"var orderID = pm.environment.get(\"orderID\");",
									"var knownDate = pm.environment.get(\"knownDate\");",
									"var loadingDeadlineDate = pm.environment.get(\"loadingDeadlineDate\");",
									"var orderPriority = pm.environment.get(\"orderPriority\");",
									"var carrier = pm.environment.get(\"carrier\");",
									"",
									"const responsebody = pm.response.json();",
									"",
									"pm.test(\"ClientID is correct\", function () {",
									"    pm.expect(responsebody.clientId).to.eql(clientId.toString());",
									"});",
									"",
									"pm.test(\"order Id is correct\", function () {",
									"    pm.expect(responsebody.orderId).to.eql(orderID.toString());",
									"});",
									"",
									"pm.test(\"known Date is correct\", function () {",
									"    let actualKnownDate = new Date(responsebody.knownDate);",
									"    let expectedKnownDate = new Date(knownDate);",
									"",
									"    pm.expect(actualKnownDate.getTime()).to.eql(expectedKnownDate.getTime());",
									"});",
									"",
									"pm.test(\"loading DeadlineDate is correct\", function () {",
									"    let actualLoadingDeadlineDate = new Date(responsebody.loadingDeadlineDate);",
									"    let expectedLoadingDeadlineDate = new Date(loadingDeadlineDate)",
									"",
									"    pm.expect(actualLoadingDeadlineDate.getTime()).to.eql(expectedLoadingDeadlineDate.getTime());",
									"});",
									"",
									"pm.test(\"priority is correct\", function () {",
									"    pm.expect(responsebody.priority).to.eql(orderPriority);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "ourSecretApiKey"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/orders?orderId={{orderID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete OrderId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Order successfully.\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "ApiKey",
								"value": "ourSecretApiKey"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/orders?orderId={{orderID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "Create handlingUnit and LocationID for endpoint Loc_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.info(\"HU_1: Call request to create handlingUnits successfully\")",
									"",
									"pm.environment.set(\"handlingID\", \"autoHandlingID_\".concat(_.random(20,500)))",
									"",
									"pm.environment.set(\"locationID\", pm.environment.get(\"handlingID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify create Handling successfully, status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ApiKey",
								"value": "ourSecretApiKey"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"handlingUnits"
							],
							"query": [
								{
									"key": "handlingUnitId",
									"value": "{{handlingID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loc_1: Get location information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify create Handling successfully, status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/locations?locationId={{locationID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"locations"
							],
							"query": [
								{
									"key": "locationId",
									"value": "{{locationID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loc_2: Cal request with locationID does NOT exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify get location does NOT exist, status code 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const responsebody = pm.response.json();",
									"let expectedErrorMessage = \"Location \" + pm.environment.get(\"randomString\") + \" does not exist\"",
									"",
									"pm.test(\"Verify error message\", function () {",
									"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomString(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"pm.environment.set(\"randomString\", randomString(10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/losrestapi/clients/{{clientId}}/locations?locationId={{randomString}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"losrestapi",
								"clients",
								"{{clientId}}",
								"locations"
							],
							"query": [
								{
									"key": "locationId",
									"value": "{{randomString}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stocks",
			"item": [
				{
					"name": "High priority test cases",
					"item": [
						{
							"name": "Create handlingUnit and LocationID for endpoint Stock_1: Create Stock",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"HU_1: Call request to create handlingUnits successfully\")",
											"",
											"pm.environment.set(\"handlingID\", \"autoHandlingID_\".concat(_.random(20,500)))",
											"",
											"pm.environment.set(\"locationID\", pm.environment.get(\"handlingID\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify create Handling successfully, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{commonStatus}}\"\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/handlingUnits?handlingUnitId={{handlingID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"handlingUnits"
									],
									"query": [
										{
											"key": "handlingUnitId",
											"value": "{{handlingID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_1: Call request to create stock with all valid data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_1: Call request to create stock with all valid data\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can add inventory for handing unit, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody[0].status).to.eql(pm.environment.get(\"handlingUnitStatus\"))",
											"});",
											"",
											"pm.test(\"Verify correct article\", function () {",
											"    pm.expect(responsebody[0].articleId).to.eql(pm.environment.get(\"autoArticleID\"))",
											"});",
											"",
											"pm.test(\"Verify correct handlingUnit\", function () {",
											"    pm.expect(responsebody[0].loadingEquipmentId).to.eql(pm.environment.get(\"handlingID\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_7: Call request with existing “locationId” in DB",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_7: Call request with existing “locationId” in DB\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can get stock information, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody[0].status).to.eql(pm.environment.get(\"handlingUnitStatus\"))",
											"});",
											"",
											"pm.test(\"Verify correct article\", function () {",
											"    pm.expect(responsebody[0].articleId).to.eql(pm.environment.get(\"autoArticleID\"))",
											"});",
											"",
											"pm.test(\"Verify correct handlingUnit\", function () {",
											"    pm.expect(responsebody[0].loadingEquipmentId).to.eql(pm.environment.get(\"handlingID\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify invalid cases",
					"item": [
						{
							"name": "Stock_2: Call request with location is NOT existed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_2: Call request with location is NOT existed\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"pm.environment.set(\"randomString\", randomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can NOT get stock information with invalid locationID, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Location \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_3: Call request with lacking of clientId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_3: Call request with lacking of clientId\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can NOT get stock information with invalid locationID, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Not Found\";",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.error).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{emptyClientID}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{emptyClientID}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_3: Call request with locationID is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_3: Call request with locationID is empty\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with locationID is empty, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Location \" + pm.environment.get(\"emptyLocationID\") + \" does not exist\";",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{emptyLocationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{emptyLocationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_3: Call request with quantity field is missing in the body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_3: Call request with quantity field is missing in the body\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with locationID is empty, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"stocks[0].quantity must not be null\";",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.body[0]).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_3: Call request with handlingUnit field is missing in the body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_3: Call request with handlingUnit field is missing in the body\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with locationID is empty, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = [\"stocks[0].handlingUnit must not be null\",",
											"        \"stocks[0] invalid data handlingUnit must not be empty when 'quantity' is positive\"];",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_4: Call request with duplicate ArticleId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_4: Call request with duplicate ArticleId\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with locationID is empty, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = [\"article should not be duplicated\"];",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.body).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        },\n        {\n            \"article\": \"{{autoArticleID}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_5: Call request with ArticleId is NOT existed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_4: Call request with duplicate ArticleId\")",
											"",
											"pm.environment.set(\"quantity\", _.random(1,50));",
											"",
											"let statusArray = [\"ok\",\"nio\"];",
											"pm.environment.set(\"handlingUnitStatus\", statusArray[Math.floor(Math.random() * statusArray.length)]);",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"pm.environment.set(\"randomString\", randomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify error message when calling request with articleID is NOT exist, status code 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Article \" + pm.environment.get(\"randomString\") + \" does not exist\";",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApiKey",
										"value": "ourSecretApiKey"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stocks\": [\n        {\n            \"article\": \"{{randomString}}\",\n            \"quantity\": {{quantity}},\n            \"handlingUnit\": \"{{handlingID}}\",\n            \"status\": \"{{handlingUnitStatus}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{locationID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{locationID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_9: Call request with locationId does NOT have any stock",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_9: Call request with locationId does NOT have any stock\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can get stock empty, status code 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedResponseBody = []",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody).to.eql(expectedResponseBody)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{fixedEmptyHandlingUnitID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{fixedEmptyHandlingUnitID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock_8: Call request with locationId does NOT exist Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.info(\"Stock_8: Call request with locationId does NOT exist\")",
											"",
											"",
											"function randomString(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * ",
											" charactersLength));",
											"   }",
											"   return result;",
											"}",
											"pm.environment.set(\"randomString\", randomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify can NOT get stock information via loactionID does not exist, status code 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const responsebody = pm.response.json();",
											"",
											"let expectedErrorMessage = \"Location \" + pm.environment.get(\"randomString\") + \" does not exist\"",
											"",
											"pm.test(\"Verify handling Unit status\", function () {",
											"    pm.expect(responsebody.message).to.eql(expectedErrorMessage)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/losrestapi/clients/{{clientId}}/stocks?locationId={{randomString}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"losrestapi",
										"clients",
										"{{clientId}}",
										"stocks"
									],
									"query": [
										{
											"key": "locationId",
											"value": "{{randomString}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "abc",
				"type": "string"
			},
			{
				"key": "key",
				"value": "ApiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://lx-c3-testing.heureka-solutions.com:8080",
			"type": "string"
		},
		{
			"key": "server",
			"value": "10.99.10.120"
		},
		{
			"key": "baseUrl",
			"value": "http://{{server}}/losrestapi"
		},
		{
			"key": "baseUrlClient",
			"value": "{{baseUrl}}/clients/109"
		},
		{
			"key": "apiKey",
			"value": "abc"
		},
		{
			"key": "orderNumber",
			"value": ""
		},
		{
			"key": "clientId",
			"value": "109"
		},
		{
			"key": "defaultArticle",
			"value": "566874"
		}
	]
}